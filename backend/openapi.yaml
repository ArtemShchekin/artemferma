
openapi: 3.0.3
info:
  title: Artem Ferm API
  version: 1.0.0
servers:
  - url: /api
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthRegisterReq:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          maxLength: 20
          description: Латиница, минимум одна цифра
    AuthLoginReq:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }
    AuthTokens:
      type: object
      required: [accessToken, refreshToken]
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    AuthRegisterResp:
      allOf:
        - $ref: '#/components/schemas/AuthTokens'
        - type: object
          properties:
            message:
              type: string
    AuthRefreshReq:
      type: object
      required: [refreshToken]
      properties:
        refreshToken:
          type: string
    Profile:
      type: object
      properties:
        isCoolFarmer: { type: boolean }
        firstName: { type: string, nullable: true }
        lastName: { type: string, nullable: true }
        middleName: { type: string, nullable: true }
        nickname:
          type: string
          nullable: true
          description: "Доступно только для прохладных фермеров"
        passport:
          type: string
          nullable: true
          description: "Доступно только для прохладных фермеров"
        level:
          type: integer
          minimum: 1
          maximum: 2
          readOnly: true
        soldCount:
          type: integer
          readOnly: true
        balance:
          type: integer
          readOnly: true
        yogurtMl:
          type: integer
          minimum: 0
          readOnly: true
        sunflowerOilMl:
          type: integer
          minimum: 0
          readOnly: true
        saladsEaten:
          type: integer
          minimum: 0
          readOnly: true
        isFatFarmer:
          type: boolean
          readOnly: true
        prices:
          allOf:
            - $ref: '#/components/schemas/ShopPrices'
          readOnly: true
    ProfileUpdateReq:
      type: object
      required: [isCoolFarmer]
      properties:
        isCoolFarmer:
          type: boolean
          description: |
            Определяет режим обновления профиля.
            Для прохладного фермера (true) требуется указать nickname и passport.
            Для обычного (false) требуются firstName, lastName и middleName.
        firstName:
          type: string
          nullable: true
          description: Обязательное поле для обычного фермера.
        lastName:
          type: string
          nullable: true
          description: Обязательное поле для обычного фермера.
        middleName:
          type: string
          nullable: true
          description: Обязательное поле для обычного фермера.
        nickname:
          type: string
          nullable: true
          description: Обязательное поле для прохладного фермера.
        passport:
          type: string
          nullable: true
          description: Обязательное поле для прохладного фермера.
      description: |
        Тело запроса содержит только изменяемые поля профиля.
        В зависимости от значения `isCoolFarmer` указываются либо поля обычного фермера,
        либо данные крутого фермера.
      oneOf:
        - required: [isCoolFarmer, nickname, passport]
          properties:
            isCoolFarmer:
              const: true
        - required: [isCoolFarmer, firstName, lastName, middleName]
          properties:
            isCoolFarmer:
              const: false
    ShopPrices:
      type: object
      properties:
        purchase:
          type: object
          properties:
            basePrice: { type: integer }
            advPrice: { type: integer }
        sale:
          type: object
          properties:
            basePrice: { type: integer }
            advPrice: { type: integer }
        supplies:
          type: object
          properties:
            yogurt: { $ref: '#/components/schemas/SupplyPrice' }
            sunflowerOil: { $ref: '#/components/schemas/SupplyPrice' }
    SupplyPrice:
      type: object
      properties:
        price: { type: integer }
        volume: { type: integer }
    KitchenState:
      type: object
      properties:
        vegetables:
          type: object
          properties:
            mango: { type: integer, minimum: 0 }
            carrot: { type: integer, minimum: 0 }
            cabbage: { type: integer, minimum: 0 }
            radish: { type: integer, minimum: 0 }
          additionalProperties: false
        yogurtMl: { type: integer, minimum: 0 }
        sunflowerOilMl: { type: integer, minimum: 0 }
        saladsEaten: { type: integer, minimum: 0 }
        isFatFarmer: { type: boolean }
    InventoryItem:
      type: object
      properties:
        id: { type: integer }
        kind: { type: string, enum: [seed, veg_raw, veg_washed] }
        type: { type: string, enum: [radish, carrot, cabbage, mango, potato, eggplant] }
        status: { type: string }
        createdAt: { type: string, format: date-time }
    Plot:
      type: object
      properties:
        slot: { type: integer }
        type: { type: string, nullable: true }
        plantedAt: { type: string, format: date-time, nullable: true }
        matured: { type: boolean }
        harvested: { type: boolean }
    GardenPlotsResponse:
      type: object
      properties:
        plots:
          type: array
          items: { $ref: '#/components/schemas/Plot' }
        growthMinutes: { type: integer }
paths:
  /auth/register:
    post:
      summary: Регистрация
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthRegisterReq' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthRegisterResp' }
  /auth/login:
    post:
      summary: Логин
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthLoginReq' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthTokens' }
  /auth/refresh:
    post:
      summary: Обновить токены
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthRefreshReq' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthTokens' }
  /profile:
    get:
      security: [{ bearerAuth: [] }]
      summary: Получить профиль
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Profile' }
    put:
      security: [{ bearerAuth: [] }]
      summary: Редактирование профиля
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProfileUpdateReq' }
      responses:
        '200':
          description: OK
  /profile/{id}:
    get:
      security: [{ bearerAuth: [] }]
      summary: Получить профиль по идентификатору
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Profile' }
        '404':
          description: Не найдено
  /shop/buy:
    post:
      security: [{ bearerAuth: [] }]
      summary: Купить семена
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type]
              properties:
                type:
                  type: string
                  enum: [radish, carrot, cabbage, mango, potato, eggplant]
      responses:
        '200':
          description: OK
  /shop/buy-supply:
    post:
      security: [{ bearerAuth: [] }]
      summary: Купить товар для кухни
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [supply]
              properties:
                supply:
                  type: string
                  enum: [yogurt, sunflowerOil]
      responses:
        '200':
          description: OK
  /shop/prices:
    get:
      security: [{ bearerAuth: [] }]
      summary: Получить цены магазина
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ShopPrices' }
  /shop/sell:
    post:
      security: [{ bearerAuth: [] }]
      summary: Продать помытый овощ
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [inventoryId]
              properties:
                inventoryId: { type: integer }
      responses:
        '200':
          description: OK
  /kitchen:
    get:
      security: [{ bearerAuth: [] }]
      summary: Получить состояние кухни
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/KitchenState' }
  /kitchen/salads:
    post:
      security: [{ bearerAuth: [] }]
      summary: Приготовить салат
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [recipe]
              properties:
                recipe:
                  type: string
                  enum: [fruit, vegetable]
                ingredients:
                  type: object
                  additionalProperties: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/KitchenState' }
  /inventory:
    get:
      security: [{ bearerAuth: [] }]
      summary: Инвентарь
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  seeds:
                    type: array
                    items: { $ref: '#/components/schemas/InventoryItem' }
                  vegRaw:
                    type: array
                    items: { $ref: '#/components/schemas/InventoryItem' }
                  vegWashed:
                    type: array
                    items: { $ref: '#/components/schemas/InventoryItem' }
  /inventory/wash/{id}:
    patch:
      security: [{ bearerAuth: [] }]
      summary: Помыть овощ
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  /garden/plots:
    get:
      security: [{ bearerAuth: [] }]
      summary: Состояние грядок
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GardenPlotsResponse' }
          
  /garden/plant:
    post:
      security: [{ bearerAuth: [] }]
      summary: Посадить семя в слот
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [slot, inventoryId]
              properties:
                slot: { type: integer }
                inventoryId: { type: integer }
      responses:
        '200': { description: OK }
  /garden/harvest:
    post:
      security: [{ bearerAuth: [] }]
      summary: Собрать созревший овощ
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [slot]
              properties:
                slot: { type: integer }
      responses:
        '200': { description: OK }
